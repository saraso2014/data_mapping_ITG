{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "True North, ITG INC Mapping Script",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNyUtOOJ9ZFddhSm1ZwEL5+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saraso2014/data_mapping_ITG/blob/master/True_North%2C_ITG_INC_Mapping_Script.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ot3OasYF8hLM",
        "colab_type": "text"
      },
      "source": [
        "**STEP 1**\n",
        "export .sql file from dbdesigner.net"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sFMZtjPV9Vcd",
        "colab_type": "text"
      },
      "source": [
        "**STEP 2** convert .sql file to .txt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VEnib6SmOpMd",
        "colab_type": "text"
      },
      "source": [
        "**STEP 3** import json library for script"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UV7JI0yWOsGO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import json"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VeS9ExLS9aFN",
        "colab_type": "text"
      },
      "source": [
        "**STEP 4** use python function **get_map_elements** to clean .txt file and extract mapping items in dictionary format"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "70QLEW-vCzuf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def get_map_elements(file):\n",
        "    if file.endswith('.txt'):\n",
        "        with open(file,'r') as f:\n",
        "            data = f.read()    \n",
        "        lines = data.split(';')\n",
        "        new_lines = []\n",
        "        for line in lines[3:]:\n",
        "          #replace SQL syntax with ''\n",
        "          line = line.replace('ALTER TABLE','').replace('ADD CONSTRAINT','').replace('REFERENCES','')\n",
        "          #replace SQL syntax, strip '\\n' and split on ''\n",
        "          line = line.replace('FOREIGN KEY','').replace('REFERENCES',',').lstrip().split('  ')\n",
        "          #output variations\n",
        "          new_lines.append(line[1:])\n",
        "        #pop last empty elements in list\n",
        "        new_lines.pop()\n",
        "        #return JSON elements as python list\n",
        "        return new_lines[1:]\n",
        "    else:\n",
        "        return \"Please use a ';' delimited .txt file\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fl9u09k59lLo",
        "colab_type": "text"
      },
      "source": [
        "**STEP 5** use python function **make_dictionary** to format elements as dictionary from results of **get_map_elements** function"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cDuD1WvEENfw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def make_json_dictionary(item):\n",
        "  new_d ={}\n",
        "  for i in item:\n",
        "    j = i[:2]\n",
        "    j =  j = \"-\".join(j).replace('`','').replace('(`',\"\").replace('`)',\"\")\n",
        "    new_d[i[1].replace('(`',\"\").replace('`)',\"\")] = {j:i[2].replace('(`',\"\").replace('`)',\"\").replace('`',':')}\n",
        "  return new_d\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HU8ow4PSK8pI",
        "colab_type": "text"
      },
      "source": [
        "**STEP 6** use python function **make_json** to create .txt file in JSON format from results of **make_json_dictionary**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NDj7UaVBFPv5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def make_json(item,file_name):\n",
        "  with open(file_name,'w') as json_file:\n",
        "    json_file.write(json.dumps(item))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tl-mjmWkXTco",
        "colab_type": "text"
      },
      "source": [
        "**STEP 7** combine **get_map_elements**, **make_json_dictionary** and **make_json** into one function called **mapping_function**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fLVodjSLUaN2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def mapping_function(file,new_file):\n",
        "  lines = get_map_elements(file)\n",
        "  dictionary = make_json_dictionary(lines)\n",
        "  make_json(dictionary,new_file)\n",
        "  print(dictionary)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IZkemqKWR7ig",
        "colab_type": "text"
      },
      "source": [
        "**Example 1**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0sVjj251XsBf",
        "colab_type": "code",
        "outputId": "e0d822d5-bb06-4aba-f31d-b708feb94f8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "source": [
        "mapping_function('example1.txt','allergy_mapping1.txt')"
      ],
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'identifier': {'normal_allergy_fk0-(identifier)': ':export_allergy:identifier'}, 'clinicalStatus': {'normal_allergy_fk1-(clinicalStatus)': ':export_allergy:status'}, 'type': {'normal_allergy_fk2-(type)': ':export_allergy:type'}, 'criticality': {'normal_allergy_fk3-(criticality)': ':export_allergy:criticality'}, 'patient': {'normal_allergy_fk4-(patient)': ':export_allergy:patient'}, 'recorder': {'normal_allergy_fk5-(recorder)': ':export_allergy:recorder'}}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mK2CVpnnZ12d",
        "colab_type": "text"
      },
      "source": [
        "**Example 2**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qv4UpNc9Z7v_",
        "colab_type": "code",
        "outputId": "fca61ec7-350b-4bf2-b08c-3e9a928691f5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        }
      },
      "source": [
        "mapping_function('example2.txt','allergy_mapping2.txt')"
      ],
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'clinicalStatus': {'normal_allergy_fk1-(clinicalStatus)': ':export_allergy:status'}, 'type': {'normal_allergy_fk2-(type)': ':export_allergy:type'}, 'category': {'normal_allergy_fk3-(category)': ':export_allergy:category'}, 'criticality': {'normal_allergy_fk4-(criticality)': ':export_allergy:criticality'}, 'patient': {'normal_allergy_fk5-(patient)': ':export_allergy:patient'}, 'onsetDateTime': {'normal_allergy_fk6-(onsetDateTime)': ':export_allergy:onset'}, 'lastOccurrence': {'normal_allergy_fk7-(lastOccurrence)': ':export_allergy:lastOccurence'}}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1H6CVWUmZ1sA",
        "colab_type": "text"
      },
      "source": [
        "**Example 3**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SGBc9UMybRuU",
        "colab_type": "code",
        "outputId": "37b6d5e8-bf27-427b-e96d-536e39767560",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "mapping_function('example3.txt','allergy_mapping3.txt')"
      ],
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'criticality': {'normal_allergy_fk1-(criticality)': ':export_allergy:criticality'}}\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
